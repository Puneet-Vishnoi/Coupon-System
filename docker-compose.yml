services:
  app:
    build:
      context: .
    container_name: coupon-app
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    networks:
      - coupon-network
    env_file:
      - .env
    restart: always
    volumes:
      - ./db/postgres/coupon.sql:/coupon-system/db/postgres/coupon.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/"]
      interval: 10s
      timeout: 5s
      retries: 3
    tty: true
    stdin_open: true

  postgres:
    image: postgres:15
    container_name: coupon-postgres
    restart: always
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./db/postgres/coupon.sql:/docker-entrypoint-initdb.d/coupon.sql
    networks:
      - coupon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-postgres:
    image: postgres:15
    container_name: coupon-test-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
    volumes:
      - ./db/postgres/coupon.sql:/docker-entrypoint-initdb.d/coupon.sql
    networks:
      - coupon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: coupon-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - coupon-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-redis:
    image: redis:7
    container_name: coupon-test-redis
    restart: always
    networks:
      - coupon-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  coupon-network:
    driver: bridge